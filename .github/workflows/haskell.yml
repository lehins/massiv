name: massiv-CI

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ master ]

defaults: { run: { shell: bash } }



jobs:
  massiv-test-with-stack:
    name: Test with Stack
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        resolver: [lts-12, lts-14, lts-16, lts-18] #, nightly]
        include:
          - resolver: lts-12
            ghc: 8.4.4
            stack-yaml: stack-extra-deps.yaml
          - resolver: lts-14
            ghc: 8.6.5
            stack-yaml: stack-coveralls.yaml
          - resolver: lts-16
            ghc: 8.8.4
            stack-yaml: stack-extra-deps.yaml
          - resolver: lts-18
            ghc: 8.10.7
          # - resolver: nightly
          #   ghc: 9.0.1

          # # Latest stable for MacOS: ghc-8.8.4
          # - resolver: lts-16
          #   os: macos-latest
          #   stack-yaml: stack-extra-deps.yaml
          # # Latest stable for Windows: ghc-8.6.4
          # - resolver: lts-14
          #   os: windows-latest
          #   stack-yaml: stack-extra-deps.yaml

    env:
      STACK_YAML: stack.yaml
      STACK_ARGS: '--resolver ${{ matrix.resolver }} --system-ghc'
      cache-version: v5 # bump up this version to invalidate currently stored cache
    steps:
    - uses: actions/checkout@v2
    - uses: haskell/actions/setup@v1
      id: setup-haskell-cabal
      name: Setup Haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        enable-stack: true
        stack-version: 'latest'

    - name: Cache
      id: cache
      uses: actions/cache@v2
      # if: matrix.os != 'macos-latest'
      with:
        path: |
          ${{ steps.setup-haskell-cabal.outputs.stack-root }}
          .stack-work
          massiv/.stack-work
          massiv-test/.stack-work
        key: ${{ runner.os }}-${{ matrix.resolver }}-${{ env.cache-version }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.resolver }}-${{ env.cache-version }}
    # - name: Cache
    #   id: cache-macos
    #   uses: actions/cache@v2
    #   if: matrix.os == 'macos-latest'
    #   with:
    #     path: |
    #       ~/.stack
    #     key: ${{ runner.os }}-${{ matrix.resolver }}-${{ env.cache-version }}
    #     restore-keys: |
    #       ${{ runner.os }}-${{ matrix.resolver }}-${{ env.cache-version }}
    # - name: Workaround setup-exe-cache failure on macos
    #   if: steps.cache-macos.outputs.cache-hit == 'true' && matrix.os == 'macos-latest'
    #   run: |
    #     rm -r ~/.stack/setup-exe-cache
    # - name: Windows Cache
    #   id: cache-windows
    #   uses: actions/cache@v2
    #   if: matrix.os == 'windows-latest'
    #   with:
    #     path: |
    #       C:\\Users\\RUNNER~1\\AppData\\Roaming\\stack
    #       C:\\Users\\RUNNER~1\\AppData\\Local\\Programs\\stack
    #     key: ${{ runner.os }}-${{ matrix.resolver }}-programs-${{ env.cache-version }}
    #     restore-keys: |
    #       ${{ runner.os }}-${{ matrix.resolver }}-programs-${{ env.cache-version }}
    - name: Build
      env:
        COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
      run: |
        set -ex
        echo "${{ steps.setup-haskell-cabal.outputs.stack-root }}"
        curl -sSL https://raw.githubusercontent.com/lehins/utils/786c3fe7e9e1345d7b403019f52e344627224edf/haskell/git-modtime/git-modtime.hs -o git-modtime.hs
        stack $STACK_ARGS runghc git-modtime.hs
        # [ -n "${{ matrix.ghc }}" ] && [ "${{ matrix.os }}" == "ubuntu-latest" ] && STACK_ARGS="$STACK_ARGS --system-ghc"
        [ -n "${{ matrix.stack-yaml }}" ] && STACK_YAML=${{ matrix.stack-yaml }}
        if [ "${{ matrix.os }}.${{ matrix.resolver }}" == "ubuntu-latest.lts-14" ] && [ -n "${COVERALLS_TOKEN}" ]; then
          stack $STACK_ARGS build massiv-test:tests --coverage --test --no-run-tests --haddock --no-haddock-deps
        else
          stack $STACK_ARGS build --test --no-run-tests --haddock --no-haddock-deps
        fi
    - name: Test
      env:
        COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
      run: |
        set -ex
        # [ -n "${{ matrix.ghc }}" ] && [ "${{ matrix.os }}" == "ubuntu-latest" ] && STACK_ARGS="$STACK_ARGS --system-ghc"
        [ -n "${{ matrix.stack-yaml }}" ] && STACK_YAML=${{ matrix.stack-yaml }}
        if [ "${{ matrix.os }}.${{ matrix.resolver }}" == "ubuntu-latest.lts-14" ] && [ -n "${COVERALLS_TOKEN}" ]; then
          stack $STACK_ARGS test massiv-test:tests --coverage --haddock --no-haddock-deps
          stack $STACK_ARGS hpc report --all
          curl -L https://github.com/rubik/stack-hpc-coveralls/releases/download/v0.0.6.1/shc-linux-x64-8.8.4.tar.bz2 | tar xj shc
          ./shc --repo-token="$COVERALLS_TOKEN" --partial-coverage --fetch-coverage combined custom
        else
          stack $STACK_ARGS test massiv:doctests
          stack $STACK_ARGS test massiv-test:tests
        fi

  massiv-test-with-cabal:
    name: Test with Cabal
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { cabal: "3.6", os: ubuntu-latest, ghc: "8.0.2" }
          - { cabal: "3.6", os: ubuntu-latest, ghc: "8.2.2" }
          - { cabal: "3.6", os: ubuntu-latest, ghc: "9.0.1" }
          # - { cabal: "3.6", os: ubuntu-latest, ghc: "9.2.1" }
          - { cabal: "3.6", os: windows-latest, ghc: "8.0.2" }
          - { cabal: "3.6", os: windows-latest, ghc: "8.2.2" }
          - { cabal: "3.6", os: windows-latest, ghc: "9.0.1" }
          # - { cabal: "3.6", os: windows-latest, ghc: "9.2.1" }
          - { cabal: "3.6", os: macOS-latest, ghc: "8.0.2" }
          - { cabal: "3.6", os: macOS-latest, ghc: "8.2.2" }
          - { cabal: "3.6", os: macOS-latest, ghc: "9.0.1" }
          # - { cabal: "3.6", os: macOS-latest, ghc: "9.2.1" }

    env:
      cache-version: v1 # bump up this version to invalidate currently stored cache
    steps:
    - uses: actions/checkout@v2
    - uses: haskell/actions/setup@v1
      id: setup-haskell-cabal
      name: Setup Haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}

    - name: Cache Cabal Store
      id: cache
      uses: actions/cache@v2
      with:
        path: |
          ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
        key: cabal-${{ runner.os }}-${{ matrix.resolver }}-${{ env.cache-version }}
        restore-keys: |
          cabal-${{ runner.os }}-${{ matrix.resolver }}-${{ env.cache-version }}
    - name: Build
      run: |
        set -ex
        cabal configure --haddock-all --enable-tests --project-file cabal-ci.project
        cabal build all --write-ghc-environment-files=always --project-file cabal-ci.project
    - name: Test
      run: |
        set -ex
        cabal test all --project-file cabal-ci.project

  massiv-bench:
    name: Benchmarks
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        resolver: [lts-18]
        include:
          - resolver: lts-18
            ghc: 8.10.7

    env:
      STACK_YAML: stack.yaml
      STACK_ARGS: '--resolver ${{ matrix.resolver }} --system-ghc'
      cache-version: v1 # bump up this version to invalidate currently stored cache
    steps:
    - uses: actions/checkout@v2
    - uses: haskell/actions/setup@v1
      id: setup-haskell-cabal
      name: Setup Haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        enable-stack: true
        stack-version: 'latest'

    - name: Cache
      id: cache
      uses: actions/cache@v2
      with:
        path: |
          ${{ steps.setup-haskell-cabal.outputs.stack-root }}
          massiv/.stack-work
          massiv-bench/.stack-work
        key: bench-${{ runner.os }}-${{ matrix.resolver }}-${{ env.cache-version }}
        restore-keys: |
          bench-${{ runner.os }}-${{ matrix.resolver }}-${{ env.cache-version }}
    - name: Build
      run: |
        set -ex
        curl -sSL https://raw.githubusercontent.com/lehins/utils/786c3fe7e9e1345d7b403019f52e344627224edf/haskell/git-modtime/git-modtime.hs -o git-modtime.hs
        stack $STACK_ARGS runghc git-modtime.hs
        cd massiv-bench
        stack $STACK_ARGS build --bench --no-run-benchmarks


  massiv-examples:
    name: Examples

    runs-on: ubuntu-latest

    env:
      STACK_ARGS: '--resolver lts-18.16 --system-ghc'
    steps:
    - uses: actions/checkout@v2
    - uses: haskell/actions/setup@v1
      id: setup-haskell-cabal
      name: Setup Haskell
      with:
        ghc-version: '8.10.7'
        enable-stack: true
        stack-version: 'latest'

    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_ACTOR}/${GITHUB_REF#refs/heads/})"
      id: extract_branch

    - name: Cache
      uses: actions/cache@v2.0.0
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: |
          "~/.stack"
          "massiv-examples/.stack-work"
          "massiv-examples/*/.stack-work"
        # An explicit key for restoring and saving the cache
        key: "${{ steps.extract_branch.outputs.branch }}"
        restore-keys: "*/master"

    - name: Build and Test
      run: |
        sudo apt-get install freeglut3-dev
        cd massiv-examples
        curl -sSL https://raw.githubusercontent.com/lehins/utils/786c3fe7e9e1345d7b403019f52e344627224edf/haskell/git-modtime/git-modtime.hs -o git-modtime.hs
        stack script $STACK_ARGS git-modtime.hs
        stack test $STACK_ARGS --bench --no-run-benchmarks --haddock --no-haddock-deps
